// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4970.IceCubed2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4970.IceCubed2017.Robot;

/**
 *
 */
public class LiftTray extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private boolean gamble;
	private boolean timeOut;
	
	public LiftTray(boolean timeout, boolean gamble) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.liftMotor);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.gamble = gamble;
        this.timeOut = timeout;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.liftTrayDutyCycle = SmartDashboard.getNumber("Lift Tray Duty Cycle", Robot.liftTrayDutyCycle);
    	if (Robot.inAuto == true)
    	{
    		setTimeout(0.5);
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.liftMotor.lift(Robot.liftTrayDutyCycle);
    }

    protected boolean isFinished() {
    	// check for auto mode where the target was not found and we're not going to gamble and release the gear anyway
    	if ((Robot.inAuto == true) && (Robot.targetFound == false) && (gamble == false))
    	{
    		return true;
    	}
    	else if ((Robot.inAuto == true) && (isTimedOut()))
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.liftMotor.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
