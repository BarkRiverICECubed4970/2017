// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4970.IceCubed2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4970.IceCubed2017.Robot;
import org.usfirst.frc4970.IceCubed2017.subsystems.DriveTrain;

/**
 *
 */
public class DriveTowardTower extends Command {

	private double centerXValue;
	private double degrees;
	private static boolean targetFound;
	
    public DriveTowardTower() {

         requires(Robot.driveTrain);

    }    

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.setExposure(1);
    	Robot.towerDriveDutyCycle = SmartDashboard.getNumber("Tower Drive DutyCycle", Robot.towerDriveDutyCycle);
    	Robot.towerDriveTimeout = SmartDashboard.getNumber("Tower Drive Timeout", Robot.towerDriveTimeout);
    	Robot.pixelsToDegrees = SmartDashboard.getNumber("Pixels To Degrees", Robot.pixelsToDegrees);
    	setTimeout(Robot.towerDriveTimeout);
    	Robot.driveTrain.resetGyro();
    	Robot.driveTrain.setupGyroPID();
    	// redundant, since setupGyroPID() does this already
    	Robot.driveTrain.setGyroPidSetpoint(0.0);
    	Robot.driveTrain.controlLoop(DriveTrain.STOP_MOTOR);
    	targetFound = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

    	if (Robot.updateCenterXArray() == true)
    	{
    		centerXValue = (Robot.centerXArray[0] - Robot.centerXArray[1])/2.0 + Robot.centerXArray[1];
    		// change centerX to drive direction
//    		centerXValue = centerXValue - Robot.IMG_CENTER;
    		centerXValue = centerXValue - 143.0;
    	
    		// convert centerXValue to degrees to turn
    		degrees = centerXValue * Robot.pixelsToDegrees;
    		Robot.driveTrain.resetGyro();
    		Robot.driveTrain.setGyroPidSetpoint(degrees);
    		
    		SmartDashboard.putNumber("centerXValue", centerXValue);
    		targetFound = true;
    	}

    	/* 
    	 * as long as the target was found at least once, drive toward
    	 * the computed angle
    	 */
    	if (targetFound == true)
    	{
    		Robot.driveTrain.controlLoop(DriveTrain.TOWER_DRIVE);
    	}    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.controlLoop(DriveTrain.STOP_MOTOR);
    	Robot.setExposure(3);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
