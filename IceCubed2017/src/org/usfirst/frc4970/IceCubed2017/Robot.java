// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4970.IceCubed2017;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc4970.IceCubed2017.commands.PlaceGear;
import org.usfirst.frc4970.IceCubed2017.commands.TimedDrive;
import org.usfirst.frc4970.IceCubed2017.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser<Command> autoChooser;

    private static UsbCamera camera;
    private static int cameraExposure;
    
    public Preferences prefs;
    public static int timedDriveTimeout;
    public static int releaseGearTimeout;
    public static int liftTrayTimeout;
    public static int lowerTrayTimeout;
    public static double grabDutyCycle;
    public static double grabMaxCurrent;
    public static double releaseDutyCycle;
    public static double timedDriveDutyCycle;
    public static double towerDriveDutyCycle;
    public static double liftTrayDutyCycle;
    public static double lowerTrayDutyCycle;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static GearMotor gearMotor;
    public static LiftMotor liftMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
   
    	RobotMap.init();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        gearMotor = new GearMotor();
        liftMotor = new LiftMotor();
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	prefs = Preferences.getInstance();

        timedDriveTimeout = prefs.getInt("Timed Drive Seconds", 4);
        releaseGearTimeout = prefs.getInt("Release Seconds", 4);
        liftTrayTimeout = prefs.getInt("Lift Seconds", 4);
        lowerTrayTimeout = prefs.getInt("Lower Seconds", 4);
        grabDutyCycle = 0.25;
        grabMaxCurrent = 8.0;
        releaseDutyCycle = 0.5;
        liftTrayDutyCycle = 0.25;
        lowerTrayDutyCycle = 0.25;
        timedDriveDutyCycle = 0.4;
        towerDriveDutyCycle = 0.4;
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        // instantiate the command used for the autonomous period
        autoChooser = new SendableChooser<Command>();
        autoChooser.addDefault("Place Gear", new PlaceGear());
        autoChooser.addObject("Timed Drive", new TimedDrive(timedDriveTimeout, timedDriveDutyCycle));
        autoChooser.addObject("Do Nothing", null);
        SmartDashboard.putData("Autonomous chooser", autoChooser);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


        new Thread(() -> {
        	camera = CameraServer.getInstance().startAutomaticCapture();
        	camera.setResolution(640, 480);
        	cameraExposure = 3;
        	camera.setExposureManual(cameraExposure);
        	
        	CvSink cvSink = CameraServer.getInstance().getVideo();
        	CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
        	
        	Mat source = new Mat();
        	Mat output = new Mat();
        	
        	while (true) {
        		cvSink.grabFrame(source);
        		Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
        		outputStream.putFrame(output);
        	}
        	
        }).start();
        
        
        new Thread(() -> {
        	double counter = 0;
        	while (true) {
        		SmartDashboard.putNumber("Counter", counter++);
        		Timer.delay(0.1);
        	}
        }).start();        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        cameraExposure = 0;
        camera.setExposureManual(cameraExposure);
        autonomousCommand = (Command) autoChooser.getSelected();
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        cameraExposure = 3;
        camera.setExposureManual(cameraExposure);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        if (cameraExposure != (int)SmartDashboard.getNumber("Camera Exposure", 3))
        {
        	cameraExposure = (int)SmartDashboard.getNumber("Camera Exposure", 3);
        	camera.setExposureManual(cameraExposure);
        }
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
