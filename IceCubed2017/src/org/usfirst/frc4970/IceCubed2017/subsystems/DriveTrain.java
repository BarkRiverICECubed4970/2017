// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4970.IceCubed2017.subsystems;

import org.usfirst.frc4970.IceCubed2017.RobotMap;
import org.usfirst.frc4970.IceCubed2017.commands.*;
import org.usfirst.frc4970.IceCubed2017.Robot;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static double dutyCycleLimit;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void drive(double forward, double rotate, boolean squaredInputs) {
    	
    	dutyCycleLimit = SmartDashboard.getNumber("Max Drive DutyCycle",1.0);

    	if (dutyCycleLimit < 1.0)
    	{
    		if (forward < (-1.0*dutyCycleLimit))
    		{
    			forward = -1.0*dutyCycleLimit;
    		} else if (forward > dutyCycleLimit)
    		{
    			forward = dutyCycleLimit;
    		}
    		
    		if (rotate < (-1.0*dutyCycleLimit))
    		{
    			rotate = -1.0*dutyCycleLimit;
    		} else if (rotate > dutyCycleLimit)
    		{
    			rotate = dutyCycleLimit;
    		}
    	}

    	robotDrive41.arcadeDrive(forward, rotate, squaredInputs);
    }
    
    public void stop() {
    	robotDrive41.drive(0,0);
    }

}

